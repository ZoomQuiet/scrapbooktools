<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="zoomq.20110821191131.2934"><vh>@chapters</vh></v>
<v t="zoomq.20070122144132"><vh>ScrapBook tools</vh>
<v t="zoomq.20200704152503.1"><vh>@clean append_ann.py</vh>
<v t="zoomq.20200704152934.1"><vh>&lt;&lt;notes&gt;&gt;</vh></v>
<v t="zoomq.20200704152503.5"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20200704152503.6"><vh>&lt;&lt;define&gt;&gt;</vh>
<v t="zoomq.20200704152503.7"><vh>&lt;&lt;configures&gt;&gt;</vh></v>
</v>
<v t="zoomq.20200704152503.2"><vh>&lt;&lt;__main__&gt;&gt;</vh></v>
<v t="zoomq.20200704154007.1"><vh>append()</vh></v>
<v t="zoomq.20200704155016.1"><vh>_replace_inc()</vh></v>
<v t="zoomq.20200704154707.1"><vh>_page_walker()</vh></v>
</v>
<v t="zoomq.20110821191131.2957"><vh>readme.txt</vh>
<v t="zoomq.20200704152010.1"><vh>&lt;&lt;du&gt;&gt;</vh></v>
<v t="zoomq.20140226204618.4705"><vh>&lt;&lt;scan&gt;&gt;</vh></v>
<v t="zoomq.20110821191131.2959"><vh>root</vh></v>
<v t="zoomq.20110821191131.2958"><vh>node</vh></v>
<v t="zoomq.20110821191131.2960"><vh>separator</vh></v>
<v t="zoomq.20110821191131.2961"><vh>URI</vh></v>
</v>
<v t="zoomq.20140226204618.4724"><vh>@clean expidxlevels.py</vh>
<v t="zoomq.20140226204618.4725"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20140226204618.4726"><vh>&lt;&lt;define&gt;&gt;</vh>
<v t="zoomq.20140226204618.4727"><vh>&lt;&lt;configures&gt;&gt;</vh>
<v t="zoomq.20140226204618.4728"><vh>HTM</vh></v>
<v t="zoomq.20140226204618.4729"><vh>boody</vh></v>
<v t="zoomq.20140226204618.4730"><vh>ifram</vh></v>
<v t="zoomq.20140226204618.4731"><vh>idx</vh></v>
</v>
</v>
<v t="zoomq.20140226204618.4732"><vh>run_time(func)</vh></v>
<v t="zoomq.20140226204618.4736"><vh>exp_root_idx(expath,drdf)</vh></v>
<v t="zoomq.20140226204618.4737"><vh>exp_sub_idx(rdf,rootseq)</vh></v>
<v t="zoomq.20140226204618.4738"><vh>exp_if_tree(rdf,rootseq)</vh></v>
<v t="zoomq.20140710225253.4580"><vh>exp_level_idx(pathto)</vh>
<v t="zoomq.20140710225253.4581"><vh> &lt;&lt;xmltodict.parse&gt;&gt;</vh>
<v t="zoomq.20140710225253.4582"><vh>&lt;&lt;rm_chaos_search&gt;&gt;</vh></v>
</v>
<v t="zoomq.20140710225253.4583"><vh> &lt;&lt;untangle.parse&gt;&gt;</vh></v>
<v t="zoomq.20140710225253.4584"><vh>&lt;&lt;xml.parsers.expat&gt;&gt;</vh>
<v t="zoomq.20140710225253.4585"><vh>start_element</vh>
<v t="zoomq.20140710225253.4586"><vh> &lt;&lt;RDF:Description&gt;&gt;</vh></v>
<v t="zoomq.20140710225253.4587"><vh>&lt;&lt;RDF:li&gt;&gt;</vh></v>
<v t="zoomq.20140710225253.4588"><vh>&lt;&lt;RDF:Seq&gt;&gt;</vh></v>
</v>
<v t="zoomq.20140710225253.4589"><vh>end_element</vh></v>
</v>
</v>
<v t="zoomq.20140226204618.4739"><vh>_uli_all_item(rdf,seqid)</vh></v>
<v t="zoomq.20140226204618.4740"><vh>_seq_info(rdf,seqid)</vh></v>
<v t="zoomq.20140226204618.4741"><vh>_desc_info(rdf,rdfid)</vh></v>
</v>
<v t="zoomq.20070122144329"><vh>@clean fixhtmlexp.py</vh>
<v t="zoomq.20070122144329.1"><vh>&lt;&lt; declarations &gt;&gt;</vh></v>
<v t="zoomq.20070122144329.2"><vh>&lt;&lt; try &gt;&gt;</vh></v>
<v t="zoomq.20070122144329.3"><vh>calss fixhtmlexp</vh>
<v t="zoomq.20070122144620"><vh>__inti__()</vh></v>
<v t="zoomq.20070122145003"><vh>idxit()</vh></v>
<v t="zoomq.20080404224002"><vh>title()</vh></v>
</v>
</v>
<v t="zoomq.20140708152848.3473"><vh>_chaos</vh>
<v t="zoomq.20110825085230.2984"><vh>@nosent demoyield.py</vh></v>
<v t="zoomq.20110825085230.2985"><vh>scrapbook:output.js</vh></v>
</v>
<v t="zoomq.20140226204618.4732"></v>
<v t="zoomq.20110821191131.5287"><vh>@clean zq_chk4scrap.py</vh>
<v t="zoomq.20140708152848.3467"><vh>&lt;&lt;__main__&gt;&gt;</vh></v>
<v t="zoomq.20140708152848.3469"><vh>&lt;&lt;click&gt;&gt;</vh></v>
<v t="zoomq.20140708152848.3468"><vh>&lt;&lt;version&gt;&gt;</vh></v>
<v t="zoomq.20110821191131.5288"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20110821191131.5295"><vh>&lt;&lt;define&gt;&gt;</vh>
<v t="zoomq.20110821191131.5296"><vh>&lt;&lt;configures&gt;&gt;</vh>
<v t="zoomq.20140708152848.3475"><vh>模板</vh>
<v t="zoomq.20140708152848.3482"><vh>&lt;&lt;TPL_NC&gt;&gt;</vh></v>
<v t="zoomq.20140708152848.3483"><vh>&lt;&lt;TPL_NOTE&gt;&gt;</vh></v>
<v t="zoomq.20140708152848.3481"><vh>&lt;&lt;TPL_URI&gt;&gt;</vh></v>
<v t="zoomq.20140708152848.3480"><vh>&lt;&lt;TPL_FOLDER&gt;&gt;</vh></v>
<v t="zoomq.20140708152848.3479"><vh>&lt;&lt;TPL_LI&gt;&gt;</vh></v>
<v t="zoomq.20140708152848.3478"><vh>&lt;&lt;TPL_SEQ&gt;&gt;</vh></v>
<v t="zoomq.20140708152848.3477"><vh>&lt;&lt;TPL_ROOT&gt;&gt;</vh></v>
<v t="zoomq.20140708152848.3476"><vh>&lt;&lt;TPL_BODY&gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="zoomq.20140226204618.4732"></v>
<v t="zoomq.20140226204618.4742"><vh>chk_data_dir()</vh></v>
<v t="zoomq.20140708152848.3470"><vh>_load_pkl(REPO_NAME)</vh></v>
<v t="zoomq.20140226204618.4733"><vh>exp_level_idx(pathto)</vh>
<v t="zoomq.20140708152848.3487"><vh> &lt;&lt;xmltodict.parse&gt;&gt;</vh>
<v t="zoomq.20140710225253.4569"><vh>&lt;&lt;rm_chaos_search&gt;&gt;</vh></v>
</v>
<v t="zoomq.20140708152848.3486"><vh> &lt;&lt;untangle.parse&gt;&gt;</vh></v>
<v t="zoomq.20140708152848.3485"><vh>&lt;&lt;xml.parsers.expat&gt;&gt;</vh>
<v t="zoomq.20140226204618.4734"><vh>start_element</vh>
<v t="zoomq.20140708152848.3464"><vh> &lt;&lt;RDF:Description&gt;&gt;</vh></v>
<v t="zoomq.20140708152848.3463"><vh>&lt;&lt;RDF:li&gt;&gt;</vh></v>
<v t="zoomq.20140708152848.3462"><vh>&lt;&lt;RDF:Seq&gt;&gt;</vh></v>
</v>
<v t="zoomq.20140226204618.4735"><vh>end_element</vh></v>
</v>
</v>
<v t="zoomq.20140710225253.4568"><vh>rm_chaos_search()</vh></v>
<v t="zoomq.20140708152848.3488"><vh>re_xmltodict_rdf()</vh>
<v t="zoomq.20140708152848.3493"><vh>&lt;&lt;_clean_rdf&gt;&gt;</vh>
<v t="zoomq.20140708152848.3497"><vh>&lt;&lt;cleanning&gt;&gt;</vh></v>
<v t="zoomq.20140708152848.7642"><vh>&lt;&lt;CTIME&gt;&gt;</vh></v>
<v t="zoomq.20140708152848.7641"><vh>&lt;&lt;progressbar&gt;&gt;</vh></v>
</v>
<v t="zoomq.20140708152848.3489"><vh>&lt;&lt;_walk_rdf_tree&gt;&gt;</vh>
<v t="zoomq.20140708152848.3490"><vh>chk matters</vh>
<v t="zoomq.20140708152848.3491"><vh>&lt;&lt;in SEQ&gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20140708152848.3492"><vh>&lt;&lt;_print_tree_node&gt;&gt;</vh></v>
</v>
<v t="zoomq.20140708152848.7643"><vh>mv_chaos_data()</vh>
<v t="zoomq.20140708152848.7645"><vh>&lt;&lt;progressbar&gt;&gt;</vh></v>
</v>
<v t="zoomq.20140226204618.4746"><vh>chk_data_ids(expath,drdf)</vh></v>
<v t="zoomq.20140708152848.3466"><vh>exp_rdf_tree(expath,drdf)</vh>
<v t="zoomq.20140708152848.3472"><vh>&lt;&lt;_diff_show_tree&gt;&gt;</vh></v>
<v t="zoomq.20140708152848.3471"><vh>&lt;&lt;_exp_txt_tree&gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20140226204618.4757"><vh>@clean scrap_re_rdf.py</vh>
<v t="zoomq.20140226204618.4758"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20140226204618.4759"><vh>&lt;&lt;define&gt;&gt;</vh>
<v t="zoomq.20140226204618.4760"><vh>&lt;&lt;configures&gt;&gt;</vh>
<v t="zoomq.20140226204618.4874"><vh>RDF</vh></v>
</v>
</v>
<v t="zoomq.20140226204618.4761"><vh>run_time(func)</vh></v>
<v t="zoomq.20140226204618.4762"><vh>exp_level_idx(pathto)</vh>
<v t="zoomq.20140226204618.4763"><vh>start_element</vh></v>
<v t="zoomq.20140226204618.4764"><vh>end_element</vh></v>
</v>
<v t="zoomq.20140226204618.4765"><vh>chk_data_dir()</vh></v>
<v t="zoomq.20140226204618.4766"><vh>chk_data_ids(expath,drdf)</vh>
<v t="zoomq.20140226204618.4876"><vh>&lt;&lt;gen_seqs&gt;&gt;</vh>
<v t="zoomq.20140226204618.4877"><vh>&lt;&lt;gen_seq&gt;&gt;</vh></v>
</v>
<v t="zoomq.20140226204618.4875"><vh>&lt;&lt;gen_desc&gt;&gt;</vh></v>
<v t="zoomq.20140226204618.4881"><vh>&lt;&lt;gen_root&gt;&gt;</vh>
<v t="zoomq.20140226204618.4882"><vh>&lt;&lt;gen_seq&gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="zoomq.20110821191131.2956"><vh>tpl</vh></v>
</v>
</vnodes>
<tnodes>
<t tx="zoomq.20070122144132">auto fixed ScrapBook exp html
</t>
<t tx="zoomq.20070122144329">@language python
# coding : utf-8

&lt;&lt; declarations &gt;&gt;
__version__="fixhtmlexp.py 0.9.1"

@others

&lt;&lt; try &gt;&gt;
</t>
<t tx="zoomq.20070122144329.1">import sys,os,string,stat
import time,datetime
# match file name
#import fnmatch
#import calendar,time

# usage ini to cfg all
#import ConfigParser


</t>
<t tx="zoomq.20070122144329.2">
if __name__ == '__main__':
    """base usage
    """
    fix = fixhtmlexp()
    fix.idxit()
    print ":::And fixed title"
    fix.title()


</t>
<t tx="zoomq.20070122144329.3">class fixhtmlexp:
    """main class zip all done
    """
    @others






</t>
<t tx="zoomq.20070122144620">
def __init__(self):
    """ini all
    """    
    self.dirbook = sys.argv[1]
    self.dirtree = "tree/"
    self.tree = "frame.html"
    self.index = "index.html"
    self.idx = "idx.html"
    self.daylog = "%s"%(time.strftime("%y%m%d %H:%M:%S",time.localtime()))
    #self.ecale = calendar.monthcalendar(ey,em)
    #self.cfg = ConfigParser.ConfigParser()

</t>
<t tx="zoomq.20070122145003">def idxit(self):
    """re index the tree of ScrapBook:
        - replace src="./index.html" as src="./idx.html" in frame.html
            - if replaced ,cancel flow ..! judge by SIZE of index.html
        - cp index.html as idx.html
        - cp frame.html as index.html
    """
    root = self.dirbook+self.dirtree 
    #print root
    oldframe = open(root+self.tree).read()
    #print os.stat(root+self.tree)[stat.ST_SIZE]
    print "%s ST_SIZE::%s"%((root+self.index),os.stat(root+self.index)[stat.ST_SIZE])
    if 800 &lt; os.stat(root+self.index)[stat.ST_SIZE]:
        # not replace yet
        #newframe = string.replace(open(root+self.tree).read(),"index.html","idx.html")
        newframe = string.replace(oldframe,"index.html","idx.html")
        #open(root+self.tree,"w").write(newframe)
        open(root+self.idx,"w").write(open(root+self.index).read())
        open(root+self.index,"w").write(newframe)
        #print newframe
    else:
        # cancel replace again
        print "replaced! do nothing..."














</t>
<t tx="zoomq.20080404224002">def title(self):
    """readt scrpabook export index.html:
        - fixed Title for zoomquiet.org
    """
    expname = self.dirbook.split("/")[1]
    orgiIdx = open(self.dirbook+self.dirtree+self.index)
    mark = "&lt;title&gt;"
    retit = ""
    for line in orgiIdx:
        if mark in line:
            #print line
            if "&lt;/title&gt;" not in line:
                retit += line
            else:
                print line
                newTit='''
                    &lt;title&gt;%s in zoomquiet.io
                    reformat by %s
                    {%s}-ScrapBook&lt;/title&gt;
                    '''%(expname,__version__,self.daylog)           
                print newTit
                retit += newTit
        else:
            retit += line
    orgiIdx.close()
    open(self.dirbook+self.dirtree+self.index,"w").write(retit)




</t>
<t tx="zoomq.20110821191131.2934"></t>
<t tx="zoomq.20110821191131.2956">@path tpl
</t>
<t tx="zoomq.20110821191131.2957">= ScrapBook 工具集 =

== DONE ==
- 对换默认的输出页面,将 index.html 变成框架页面
- 重构默认输出的树图页面,变成 不同层次的一组索引页面:
    - 根概要索引
    - 2级正常树索引框架页面

$ python scraptools/expidxlevels.py /home/zoomq/zdata/zScrapBook/ZqSKM/
collected pages ==  8415
	exp_root_idx() RUNed~ 178.66588 ms

$ python scraptools/expidxlevels.py /home/zoomq/zdata/zScrapBook/ZqFLOSS/
collected pages ==  30874
	exp_root_idx() RUNed~ 338.19604 ms

&lt;&lt;du&gt;&gt;

== scan ==
&lt;&lt;scan&gt;&gt;


== TODO ==
- 将原始链接,嵌入到所有页面提示中
- 整体树关系图谱化索引

== STUFF ==
&lt;?xml version="1.0"?&gt;
&lt;RDF:RDF xmlns:NS2="http://amb.vis.ne.jp/mozilla/scrapbook-rdf#"
         xmlns:NC="http://home.netscape.com/NC-rdf#"
         xmlns:RDF="http://www.w3.org/1999/02/22-rdf-syntax-ns#"&gt;

@others


    '''
    for root in rdf_seq.get_by(rdf_about = ns.SCRAPBOOK.root):
        print root

    ns = surf.namespace
    ns.register(scrapbook="http://amb.vis.ne.jp/mozilla/scrapbook-rdf#")
    ns.register(nc2="http://home.netscape.com/NC-rdf#")
    ns.register(rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#")
    #print ns.NC2
    store = surf.Store(reader = "rdflib",
                   writer = "rdflib",
                   rdflib_store = "IOMemory")    
    session = surf.Session(store)
    print "Load RDF data"
    store.load_triples(source = CF.RDF% pathto)
    rdf_seq = session.get_class(ns.RDF["Seq"])
    print len(rdf_seq.all())
    print rdf_seq.all().filter(rdf_about = "(%s LIKE 'roo%%')")
    '''

    #rdf = ElementTree().parse(CF.RDF% pathto)
    #rdf = etree.parse(CF.RDF% pathto)
    #print rdf.xpath("//RDF:Seq")
    #&lt;RDF:Seq RDF:about="urn:scrapbook:root"&gt;


</t>
<t tx="zoomq.20110821191131.2958">  &lt;RDF:Description RDF:about="urn:scrapbook:item20060602092549"
                   NS2:id="20060602092549"
                   NS2:type="note"
                   NS2:chars="UTF-8"
                   NS2:comment=""
                   NS2:icon=""
                   NS2:source=""
                   NS2:title="IM签名档" /&gt;
</t>
<t tx="zoomq.20110821191131.2959">            
  &lt;RDF:Seq RDF:about="urn:scrapbook:root"&gt;
    &lt;RDF:li RDF:resource="urn:scrapbook:item20091114162455"/&gt;
    &lt;RDF:li RDF:resource="urn:scrapbook:item20050206112141"/&gt;
    &lt;RDF:li RDF:resource="urn:scrapbook:item20050104191406"/&gt;
    &lt;RDF:li RDF:resource="urn:scrapbook:item20100921141400"/&gt;
    &lt;RDF:li RDF:resource="urn:scrapbook:item20091113232313"/&gt;
    &lt;RDF:li RDF:resource="urn:scrapbook:item20041208091045"/&gt;
    &lt;RDF:li RDF:resource="urn:scrapbook:item20061018211155"/&gt;
    &lt;RDF:li RDF:resource="urn:scrapbook:item20060602092549"/&gt;
    &lt;RDF:li RDF:resource="urn:scrapbook:item20050323093817"/&gt;
    &lt;RDF:li RDF:resource="urn:scrapbook:item20060925170410"/&gt;
  &lt;/RDF:Seq&gt;
  </t>
<t tx="zoomq.20110821191131.2960">  &lt;NC:BookmarkSeparator RDF:about="urn:scrapbook:item20091113232313"
                   NS2:id="20091113232313"
                   NS2:type="separator"
                   NS2:title=""
                   NS2:chars=""
                   NS2:comment=""
                   NS2:icon=""
                   NS2:source="" /&gt;
</t>
<t tx="zoomq.20110821191131.2961">  &lt;RDF:Description RDF:about="urn:scrapbook:item20081031090842"
                   NS2:id="20081031090842"
                   NS2:type=""
                   NS2:title="Leica M8图片metadata一览"
                   NS2:chars="UTF-8"
                   NS2:comment=""
                   NS2:source="http://www.leica.org.cn/post/446/"
                   NS2:icon="resource://scrapbook/data/20081031090842/favicon.ico" /&gt;
</t>
<t tx="zoomq.20110821191131.5287">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''主要检查行为:
-D 是否加载上次已经分析的对象树
-diff 对比 rdf 和 目录 的节点数量
-exp 输出 rdf 显示节点树
-chaos 清查未显示节点列表
-rm|mv 清除/移动 未显示节点目录集
'''

&lt;&lt;imports&gt;&gt;
&lt;&lt;define&gt;&gt;

@others

VERSION = "chkscrap.py v14.07.08"
&lt;&lt;version&gt;&gt;
&lt;&lt;click&gt;&gt;

if __name__ == "__main__":
    #cli(obj={})

    &lt;&lt;__main__&gt;&gt;
    
    













</t>
<t tx="zoomq.20110821191131.5288">import os
import sys
import pickle
import types
import time
import shutil
#import traceback
import xml.parsers.expat
#import xml.etree.cElementTree as etree
#   140708 try click
import click
#   140709 ty sh del dir, and others for rebuild rdf
from sh import cp
from sh import rm
from sh import mv
from sh import ls
from sh import wc
#import untangle
import xmltodict
import progressbar

#from lxml import etree
#from xml.etree.cElementTree import ElementTree
#from rdflib.URIRef import URIRef
#from rdflib.Literal import Literal
#from rdflib.BNode import BNode
#from rdflib.Namespace import Namespace
#from rdflib.constants import TYPE, VALUE
# Import RDFLib's default TripleStore implementation
#from rdflib.TripleStore import TripleStore
#import surf


</t>
<t tx="zoomq.20110821191131.5295">class Borg():
    '''base http://blog.youxu.info/2010/04/29/borg
        - 单例式配置收集类
    '''
    __collective_mind = {}
    def __init__(self):
        self.__dict__ = self.__collective_mind

    &lt;&lt;configures&gt;&gt;

# init all cfg. var
CF = Borg()

</t>
<t tx="zoomq.20110821191131.5296">#path
IDPRE = "urn:scrapbook:item%s"
RDF = "%s/scrapbook.rdf"
RERDF = '_chaos/scrapbook_%s.rdf'
PKL = '_chaos/scraptools_%s.pkl'
TREE = '_chaos/tree4_%s.txt'
STUFF = '_stuff/'

@others

IS_ROOT = 0
IS_SEQ = 0
IS_LI = 0
IS_DESC = 0

DICTRDF = {"ROOT":{}
    ,"SEQ":{}
    ,"DESC":{}
    }
CRTID = ""

'''
{"ROOT":{'id':'','li':[]}
,"SEQ":{'item...':[]
    ,,,}
,"DESC":{'item...':{'id':''
        ,'type':"" # folder|separator|note
        ,'icon':''
        ,'title':''
        ,'source':''
        ,'chars':''
        ,'comment':''
        }
    ,,,
    }
}
'''

</t>
<t tx="zoomq.20110825085230.2984">#!/usr/bin/env python
# -*- coding: utf-8 -*-
import types 
DATA= {
'SEQ':{
    "id1":['id11', 'id12']
    ,"id11":['id111']
    ,"id111":['id1111']
    ,"id12":['id21']
    ,"id21":['id211', 'id212']
    }
,'DESC':{'id1':{'title':1,'type':'folder'}
    ,'id11':{'title':11,'type':'folder'}
    ,'id12':{'title':12,'type':'file'}
    ,'id111':{'title':111,'type':'file'}
    ,'id1111':{'title':1111,'type':'file'}
    ,'id21':{'title':21,'type':'folder'}
    ,'id211':{'title':211,'type':'file'}
    ,'id212':{'title':212,'type':'file'}
    }
}

def _exp_all_item(drdf, seq, exp):
   if types.ListType is type(seq):
       for seqid in seq:
           if seqid in drdf['SEQ']:
               yield "&lt;li&gt;%s&lt;/ui&gt;" % drdf['DESC'][seqid]['title']
               for x in _exp_all_item(drdf,drdf['SEQ'][seqid],exp):
                   yield x
           else:
               for x in _exp_all_item(drdf,seqid,exp):
                   yield x
   else:
       if seq in drdf['SEQ']:
           yield "&lt;li&gt;%s&lt;/ui&gt;" % drdf['DESC'][seq]['title']
           for x in _exp_all_item(drdf,drdf['SEQ'][seq],exp):
               yield x
       else:
           yield "&lt;li&gt;%s&lt;/li&gt;" % drdf['DESC'][seq]['title']

if __name__ == '__main__':
   s = list(_exp_all_item(DATA, 'id1', ''))
   print s

</t>
<t tx="zoomq.20110825085230.2985">	execAll : function()
	{
		this.content = this.getHTMLHead();
		this.processRescursively(sbTreeUI.TREE.resource);
		this.finalize();
	},

	exec : function()
	{
		this.content = this.getHTMLHead();
		var selResList = sbTreeUI.getSelection(true, 1);
		this.content += "&lt;ul&gt;\n";
		for ( var i = 0; i &lt; selResList.length; i++ )
		{
			this.content += '&lt;li class="depth' + String(this.depth) + '"&gt;';
			this.content += this.getHTMLBody(selResList[i]);
			this.processRescursively(selResList[i]);
			this.content += "&lt;/li&gt;\n";
		}
		this.content += "&lt;/ul&gt;\n";
		this.finalize();
	},
	processRescursively : function(aContRes)
	{
		this.depth++;
		var id = ScrapBookData.getProperty(aContRes, "id") || "root";
		this.content += '&lt;ul id="folder-' + id + '"&gt;\n';
		var resList = ScrapBookData.flattenResources(aContRes, 0, false);
		for (var i = 1; i &lt; resList.length; i++) {
			this.content += '&lt;li class="depth' + String(this.depth) + '"&gt;';
			this.content += this.getHTMLBody(resList[i]);
			if (ScrapBookData.isContainer(resList[i]))
				this.processRescursively(resList[i]);
			this.content += "&lt;/li&gt;\n";
		}
		this.content += "&lt;/ul&gt;\n";
		this.depth--;
	},

	getHTMLBody : function(aRes)
	{
		var id    = ScrapBookData.getProperty(aRes, "id");
		var title = ScrapBookData.getProperty(aRes, "title");
		var icon  = ScrapBookData.getProperty(aRes, "icon");
		var type  = ScrapBookData.getProperty(aRes, "type");
		if ( icon.match(/(\/data\/\d{14}\/.*$)/) ) icon = ".." + RegExp.$1;
		if ( !icon ) icon = ScrapBookUtils.getFileName( ScrapBookUtils.getDefaultIcon(type) );
		title = title.replace(/&lt;/g, "&amp;lt;");
		title = title.replace(/&gt;/g, "&amp;gt;");
		var ret;
		switch (type) {
			case "separator": 
				ret = '&lt;hr&gt;\n';
				break;
			case "folder": 
				ret = '&lt;a class="folder" href="javascript:toggle(\'folder-' + id + '\');"&gt;'
				    + '&lt;img src="./folder.png" width="16" height="16" alt=""&gt;' + title + '&lt;/a&gt;\n';
				break;
			default: 
				var href = (type == "bookmark") ? 
				           ScrapBookData.getProperty(aRes, "source") : 
				           "../data/" + id + "/index.html";
				var target = this.optionFrame ? ' target="main"' : "";
				ret = '&lt;a href="' + href + '"' + target + ' class="' + type + '"&gt;'
				    + '&lt;img src="' + icon + '" width="16" height="16" alt=""&gt;' + title + '&lt;/a&gt;';
				break;
		}
		return ret;
	},

</t>
<t tx="zoomq.20140226204618.4705">140227 发现即使分拆了 FLOSS 仓库(7.7G) 

    zoomq @ MBP111216ZQ in ~/KuaiPan/zScrapBook
    $ du -hs *
    4.0K    7niu-devrel.json
    4.0K    7niu-floss.json
    4.0K    7niu-skm.json
    5.5G    ZqDevRel
    6.4G    ZqFLOSS
    3.5G    ZqSKM
    ...
    
依然无法进行标题的搜索!
怀疑:
    1. scrapbook.rdf 有多余
    2. data 目录中没有删除干净

$ python scraptools/chkscrap.py ZqDevRel
['ROOT', 'SEQ', 'DESC']
27275
25883 &lt;type 'list'&gt;
25923
&lt;type 'list'&gt;
25883
mes dir is: 44

	chk_data_ids() RUNed~ 1056.12087 ms

$ python scraptools/chkscrap.py ZqFLOSS
['ROOT', 'SEQ', 'DESC']
36307
30627 &lt;type 'list'&gt;
30624
&lt;type 'list'&gt;
30627
mes dir is: 0

	chk_data_ids() RUNed~ 61.11407 ms

$ python scraptools/chkscrap.py ZqSKM
['ROOT', 'SEQ', 'DESC']
10595
9059 &lt;type 'list'&gt;
9059
&lt;type 'list'&gt;
9059
mes dir is: 0

	chk_data_ids() RUNed~ 388.74292 ms

</t>
<t tx="zoomq.20140226204618.4724">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#VERSION = "expidxlevels.py v11.08.29"
VERSION = "expidxlevels.py v17.4.26"
&lt;&lt;imports&gt;&gt;
&lt;&lt;define&gt;&gt;

@others

if __name__ == "__main__":
    if 2 != len(sys.argv):
        print """ %s 将指定ScrapBook 的输出树图分解为一批小索引 usage::
$ python /path/2/expidxlevels.py /path/2/MyScrapBook/
            |                       +- ScrapBook 收藏入口目录
            +- 指出脚本自身
        """ % VERSION
    else:
        TPATH = os.path.dirname(os.path.abspath(sys.argv[0]))
        MYBOOK = os.path.abspath(sys.argv[1])
        RDFD = exp_level_idx(MYBOOK)
        exp_root_idx(MYBOOK, RDFD)















</t>
<t tx="zoomq.20140226204618.4725">import os
import sys
# 解决写文件 'ascii' codec can't encode characters 问题
# base http://blog.csdn.net/zuyi532/article/details/8851316
reload(sys)  
sys.setdefaultencoding('utf8')   
import pickle
import types
import time
#import traceback
import xml.parsers.expat
#import xml.etree.cElementTree as etree

#from lxml import etree
#from xml.etree.cElementTree import ElementTree
#from rdflib.URIRef import URIRef
#from rdflib.Literal import Literal
#from rdflib.BNode import BNode
#from rdflib.Namespace import Namespace
#from rdflib.constants import TYPE, VALUE
# Import RDFLib's default TripleStore implementation
#from rdflib.TripleStore import TripleStore
#import surf


</t>
<t tx="zoomq.20140226204618.4726">class Borg():
    '''base http://blog.youxu.info/2010/04/29/borg
        - 单例式配置收集类
    '''
    __collective_mind = {}
    def __init__(self):
        self.__dict__ = self.__collective_mind

    &lt;&lt;configures&gt;&gt;

# init all cfg. var
CF = Borg()

</t>
<t tx="zoomq.20140226204618.4727">#path
RDF = "%s/scrapbook.rdf"
RERDF = '_chaos/scrapbook_%s.rdf'
PKL = '_chaos/scraptools_%s.pkl'
TREE = '_chaos/tree4_%s.txt'
STUFF = '_stuff/'

@others

IS_ROOT = 0
IS_SEQ = 0
IS_LI = 0
IS_DESC = 0

DICTRDF = {"ROOT":{}
    ,"SEQ":{}
    ,"DESC":{}
    }
CRTID = ""
'''
{"ROOT":{'id':'','li':[]}
,"SEQ":{'item...':[]
    ,,,}
,"DESC":{'item...':{'id':''
        ,'type':"" # folder||separator
        ,'icon':''
        ,'title':''
        ,'source':''
        ,'chars':''
        ,'comment':''
        }
    ,,,
    }
}
'''
</t>
<t tx="zoomq.20140226204618.4728"># VANCL esp.
HTM = '''&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;meta http-equiv="Content-Type" content="text/html;charset=UTF-8"&gt;
	&lt;meta http-equiv="Content-Style-Type" content="text/css"&gt;
	&lt;meta http-equiv="Content-Script-Type" content="text/javascript"&gt;
	&lt;title&gt;{%(bookname)s} index tree export into iFrame - ScrapBook Collection by Zoom.Quiet &lt;/title&gt;
	&lt;link rel="stylesheet" type="text/css" href="./output.css" media="all"&gt;

&lt;/head&gt;
'''
</t>
<t tx="zoomq.20140226204618.4729">HTM += '''&lt;body&gt;
&lt;H4&gt;&lt;a href="http://zoomquiet.io"&gt;Zoom.Quiet&lt;/a&gt;'s 
&lt;a href="http://amb.vis.ne.jp/mozilla/scrapbook/"&gt;SCRAPBOOK&lt;/a&gt; 
Repo.&lt;b&gt;/%(bookname)s/&lt;/b&gt; index
&lt;/H4&gt;
    &lt;table&gt;
    %(body)s
    &lt;/table&gt;

&lt;hr/&gt;
&lt;div id="poweredby"&gt;
&lt;H4&gt;USAGE&lt;/H4&gt;
&lt;ul&gt;
&lt;li&gt;Author: &lt;a href="http://zoomquiet.io"&gt;ZoomQuiet.io&lt;/a&gt; 
(&lt;a href="mailto:zoomquiet+io[AT]gmail.com"&gt;zoom.quiet&lt;/a&gt;)
    &lt;/li&gt;
&lt;li&gt;Tools: &lt;a href="https://github.com/ZoomQuiet/scrapbooktools"&gt;ZoomQuiet / scraptools — GitHub&lt;/a&gt;
    &lt;/li&gt;
&lt;li&gt;Licenses: &lt;a href="http://creativecommons.org/licenses/by-sa/2.5/cn/"&gt;CC(by-sa)2.5&lt;/a&gt;
    (expect originality licenses of all pages)
    &lt;/li&gt;
&lt;/ul&gt;

&lt;hr/&gt;
&lt;b&gt;powered by:&lt;/b&gt;
    &lt;a href="http://www.python.org/"&gt;Python&lt;/a&gt;
    ,&lt;a href="http://amb.vis.ne.jp/mozilla/scrapbook/"&gt;SCRAPBOOK&lt;/a&gt;
    ,&lt;a href="http://webpages.charter.net/edreamleo/front.html"&gt;Leo&lt;/a&gt;
    ,&lt;a href="http://www.catb.org/hacker-emblem/"&gt;Hacker&lt;/a&gt;
    ,&lt;a href="http://www.qiniu.com/"&gt;
        &lt;img src="https://avatars1.githubusercontent.com/u/1563636?s=24"&gt;&lt;/a&gt; 
&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
'''
</t>
<t tx="zoomq.20140226204618.4730">FSET = '''&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN"&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;meta http-equiv="Content-Type" Content="text/html;charset=UTF-8"&gt;
	&lt;title&gt;exported {%(seqlevel)s} as iFrame Tree 
    - ScrapBook Collection by Zoom.Quiet&lt;/title&gt;
&lt;/head&gt;
&lt;frameset cols="200,*"&gt;
	&lt;frame id="side" name="side" src="./%(treeid)s.html"&gt;
	&lt;frame id="main" name="main" src="./readme.html"&gt;
&lt;/frameset&gt;

&lt;/html&gt;
'''
</t>
<t tx="zoomq.20140226204618.4731">IDX = '''
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;

&lt;html&gt;

&lt;head&gt;
	&lt;meta http-equiv="Content-Type" content="text/html;charset=UTF-8"&gt;
	&lt;meta http-equiv="Content-Style-Type" content="text/css"&gt;
	&lt;meta http-equiv="Content-Script-Type" content="text/javascript"&gt;
	&lt;title&gt;extput As iFrame - ScrapBook Collection by Zoom.Quiet&lt;/title&gt;
	&lt;link rel="stylesheet" type="text/css" href="./output.css" media="all"&gt;
	&lt;script type="text/javascript" language="JavaScript"&gt;&lt;!--
	function toggle(aID) {
		var listElt = document.getElementById(aID);
		listElt.style.display = ( listElt.style.display == "none" ) ? "block" : "none";
	}
	function toggleAll(willOpen) {
		var ulElems = document.getElementsByTagName("UL");
		for ( var i = 1; i &lt; ulElems.length; i++ ) {
			ulElems[i].style.display = willOpen ? "block" : "none";
		}
	}
	//--&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;!--false --&gt;
&lt;body onload="toggleAll(true);"&gt;
&lt;UL id="folder-root"&gt;
&lt;li&gt;&lt;H3&gt;&lt;a href="index.html" target="_top"&gt;up {ROOT}&lt;/a&gt;&lt;/H3&gt;&lt;/li&gt;

%(treeli)s

&lt;li&gt;&lt;H3&gt;&lt;a href="index.html" target="_top"&gt;up {ROOT}&lt;/a&gt;&lt;/H3&gt;&lt;/li&gt;

&lt;/UL&gt;
&lt;/body&gt;
&lt;/html&gt;
'''
</t>
<t tx="zoomq.20140226204618.4732">def run_time(func):
    '''from http://www.oschina.net/code/snippet_74928_3896
        - 简单的计时装饰器
    '''
    def cal_time(*args):
        '''完成目标函式的运行计时
        '''
        start = time.time()
        result = func(*args)
        passtime = time.time() - start
        print "\t\t%s() RUNed~ %.5f ms\n" % (func.__name__, passtime*1000)
        return result
    return cal_time

</t>
<t tx="zoomq.20140226204618.4733">@run_time
def exp_level_idx(pathto):
    '''解析现有 rdf 为 py 数据对象来快速理解/清查
    '''
    #print pathto, CF.RDF% pathto, os.path.basename(pathto)
    print "%s/scrapbook.rdf"% pathto 
    &lt;&lt;xmltodict.parse&gt;&gt;
    return None   
    
    &lt;&lt;untangle.parse&gt;&gt;
    return None    
    
    &lt;&lt;xml.parsers.expat&gt;&gt;

'''
#   140711 Alert!
&lt;RDF:Seq RDF:about="urn:scrapbook:search"&gt;
&lt;/RDF:Seq&gt;


{'ROOT':[item,,,]
        , 'SEQ':{'itemID':[item,,,],,,}
        , 'DESC':['itemID':{'属性':'属性值',,},,,]
    }
    ROOT 结点 -&gt; [SEQ|DESC]
        SEQ 都是目录;
        DESC 都是最终叶子;
    
'''</t>
<t tx="zoomq.20140226204618.4734">def start_element(name, attrs):
    #print 'Start element:', name, attrs
    if "RDF:Seq" == name:
        &lt;&lt;RDF:Seq&gt;&gt;
    else:
        CF.IS_SEQ = 0
        if "RDF:li" == name:
            &lt;&lt;RDF:li&gt;&gt;
        elif "RDF:Description" == name:
            &lt;&lt;RDF:Description&gt;&gt;






</t>
<t tx="zoomq.20140226204618.4735">def end_element(name):
    if "RDF:Seq" == name:
        if CF.IS_ROOT:
            CF.IS_ROOT = 0
        else:
            pass
</t>
<t tx="zoomq.20140226204618.4736">@run_time
def exp_root_idx(expath, drdf):
    rdf = drdf   #pickle.load(open(pkl, 'r'))
    bookname = os.path.basename(expath)
    htm = ""
    count = 0
    loops = 0
    for rootseq in rdf['ROOT']['li']:
        loops += 1
        if 0 == (loops % 2):
            htm += '&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;\n'% _seq_info(rdf, rootseq)
        else:
            htm += '&lt;tr class="odd"&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;\n'% _seq_info(rdf, rootseq)
        count += exp_sub_idx(expath, rdf, rootseq)
    print "collected pages == ", count
    body = htm.encode('utf8')
    html = CF.HTM % locals()
    #open("%s/tree/root-idx.html"% expath, 'w').write(html.encode('utf8'))
    open("%s/tree/index.html"% expath, 'w').write(html)
    body = u"&lt;h1&gt;是也乎,(￣▽￣)&lt;h1/&gt;&lt;h2&gt;~ Sayeahooo!&lt;/h2&gt;"
    html = CF.HTM % locals()
    open("%s/tree/readme.html"% expath, 'w').write(html)

</t>
<t tx="zoomq.20140226204618.4737">def exp_sub_idx(expath, drdf, seqid):
    rdf = drdf   #pickle.load(open(pkl, 'r'))
    bookname = os.path.basename(expath)    
    body = "&lt;tr&gt;&lt;td&gt;&lt;H3&gt;&lt;a href='index.html'&gt;back ROOT index&lt;/a&gt;&lt;/H3&gt;&lt;/td&gt;&lt;/tr&gt;"
    tot = 0
    if seqid in rdf['SEQ']:
        for subseq in rdf['SEQ'][seqid]:
            body += '&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;\n' % _seq_info(rdf, subseq)
            if subseq in rdf['SEQ']:
                tot += exp_if_tree(expath, rdf, seqid, subseq)
    return tot

</t>
<t tx="zoomq.20140226204618.4738">def exp_if_tree(expath, drdf, crtseq, seqid):
    rdf = drdf   #pickle.load(open(pkl, 'r'))
    bookname = os.path.basename(expath)
    treeli = ""
    ulis = list(_uli_all_item(rdf, seqid))
    treeli = "\n".join(ulis)
    upback = "item%s-idx.html" % drdf['DESC'][crtseq]['id']
    html = CF.IDX % locals()
    open("%s/tree/%s-tree.html"% (expath, seqid),'w').write(html.encode('utf8'))
    treeid = "%s-tree" % seqid
    seqlevel = drdf['DESC'][seqid]['title']
    html = CF.FSET % locals()
    open("%s/tree/%s-frameset.html"% (expath, seqid),'w').write(html.encode('utf8'))
    return len(ulis)

</t>
<t tx="zoomq.20140226204618.4739">def _uli_all_item(drdf, seq):
    if types.ListType is type(seq):
        for seqid in seq:
            if seqid in drdf['SEQ']:
                #print seqid
                if seqid not in drdf['DESC']:
                    continue
                else:
                    yield '''&lt;LI&gt;&lt;a class="folder"&gt;
                    &lt;img src="./folder.png" width="16" height="16" alt=""&gt;
                    %s&lt;/a&gt;&lt;UL&gt;''' % drdf['DESC'][seqid]['title']
                    for ul in _uli_all_item(drdf, drdf['SEQ'][seqid]):
                        yield ul
                    yield "&lt;/UL&gt;&lt;/LI&gt;"
            else:
                for li in _uli_all_item(drdf, seqid):
                    yield li
    else:
        if seq in drdf['SEQ']:
            yield "&lt;LI&gt;%s&lt;UL&gt;" % drdf['DESC'][seq]['title']
            for ul in _uli_all_item(drdf, drdf['SEQ'][seq]):
                yield ul    #"&lt;/ul&gt;&lt;/li&gt;"
            yield "&lt;/UL&gt;&lt;/LI&gt;"
        else:
            if seq in drdf['DESC']:
                if 'folder' == drdf['DESC'][seq]['type']:
                    yield '''&lt;LI&gt;&lt;a class="folder"&gt;
                    &lt;img src="./folder.png" width="16" height="16" alt=""&gt;
                    %s&lt;/a&gt;&lt;UL&gt;''' % drdf['DESC'][seq]['title']
                elif 'note' == drdf['DESC'][seq]['type']:
                    yield '''&lt;LI&gt;
                    &lt;a href="../data/%s/index.html" target="main" class="item"&gt;
                    &lt;img src="./treenote.png" width="16" height="16" alt=""&gt;
                    %s&lt;/a&gt;&lt;UL&gt;''' % (drdf['DESC'][seq]['id']
                        ,drdf['DESC'][seq]['title'])
                else:
                    yield '''&lt;LI&gt;
                    &lt;a href="../data/%s/index.html" target="main" class="item"&gt;
                    &lt;img src="./treeitem.png" width="16" height="16" alt=""&gt;
                    %s&lt;/a&gt;&lt;/LI&gt;''' % (drdf['DESC'][seq]['id']
                        ,drdf['DESC'][seq]['title'])
            else:
                yield "&lt;HR/&gt;"
</t>
<t tx="zoomq.20140226204618.4740">def _seq_info(rdf, seqid):
    exphtm = ""
    if seqid in rdf['SEQ']:
        exphtm += _desc_info(rdf, seqid, is_root=True)
        for subid in rdf['SEQ'][seqid]:
            exphtm += _desc_info(rdf, subid)
    elif seqid in rdf['DESC']:
        exphtm += _desc_info(rdf, seqid)
    else:
        #print "is NC:BookmarkSeparator"
        exphtm += '' 
    return exphtm
</t>
<t tx="zoomq.20140226204618.4741">def _desc_info(rdf, rdfid, is_root=False):
    #print rdfid
    if rdfid in rdf['DESC']:
        itemtitle = rdf['DESC'][rdfid]['title']
        tipid = rdf['DESC'][rdfid]['id']
        if rdfid in rdf['ROOT']['li']:
            if 'folder' == rdf['DESC'][rdfid]['type']:
                return '&lt;span id="rootitem"&gt;&lt;b&gt;{%s}&lt;/b&gt;&lt;/span&gt;' % rdf['DESC'][rdfid]['title']
            else:
                return '''&lt;span id="rootitem"&gt;
                &lt;b&gt;&lt;a href="../data/%s/index.html"&gt;{%s}&lt;/a&gt;&lt;/b&gt;
                &lt;/span&gt;''' % (rdf['DESC'][rdfid]['id']
                    ,rdf['DESC'][rdfid]['title'])
        elif 'folder' == rdf['DESC'][rdfid]['type']:
            if is_root:
                return '''&lt;span id="rootitem"&gt;
                &lt;a title="%(tipid)s" href="item%(tipid)s-frameset.html"&gt;
                &lt;b&gt;[%(itemtitle)s]&lt;/b&gt;
                &lt;/a&gt;&lt;/span&gt;'''% locals() 
            else:
                return '''&lt;span id="item" class="hadsubitems"&gt;
                &lt;a title="%(tipid)s" href="item%(tipid)s-frameset.html"&gt;
                [%(itemtitle)s]
                &lt;/a&gt;&lt;/span&gt;'''% locals() 
        else:       
            return '''&lt;span id="item" class="idx-%(tipid)s"&gt;
            ;&lt;a href="../data/%(tipid)s/index.html" title="%(itemtitle)s" class="jqactshow"&gt;%(itemtitle)s&lt;/a&gt;
            &lt;/span&gt;'''% locals()
    else:
        #print "is NC:BookmarkSeparator"
        return ""
</t>
<t tx="zoomq.20140226204618.4742">@run_time
def chk_data_dir(abspath):
    sub_data = os.listdir("%s/data"% abspath)
    print "\t data/dirs : %s"% len(sub_data)
    return sub_data
</t>
<t tx="zoomq.20140226204618.4746">@run_time
def chk_data_ids(expath, drdf):
    rdf = drdf   #pickle.load(open(pkl, 'r'))
    print "\t DESC nodes : %s"% len(rdf['DESC'].keys())
    #print rdf['DESC']['item20060616103600']
    rdf_all_id = []
    for r in rdf['DESC']:
        if "folder" == rdf['DESC'][r]['type']:
            pass
        else:
            rdf_all_id.append(r)
    print "\t rdf nodes:", len(rdf_all_id), type(rdf_all_id)
    ls_sub_data = chk_data_dir(expath)
    rdf_all_id = [v[4:] for v in rdf_all_id]
    #_difference = [v for v in ls_sub_data if v not in _all_id]  
    _difference = set(ls_sub_data).difference(set(rdf_all_id)) # b中有而a中没有的
    print "losted dir :", len(_difference)
    for err_dir in _difference:
        abs_err_dir = "%s/data/%s"% (expath, err_dir)
        shutil.rmtree(abs_err_dir)
    #print len(rdf['SEQ'].keys())
    #print rdf['SEQ']['item20070831150256']#.keys()


</t>
<t tx="zoomq.20140226204618.4757">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
VERSION = "scrap_re_rdf.py v14.02.27"
&lt;&lt;imports&gt;&gt;
&lt;&lt;define&gt;&gt;

@others

if __name__ == "__main__":
    if 2 != len(sys.argv):
        print """ %s 重构 rdf 索引数据库 usage::
$ python /path/2/scrap_re_rdf.py /path/2/MyScrapBook/
            |                       +- ScrapBook 收藏入口目录
            +- 指出脚本自身
        """ % VERSION
    else:
        TPATH = os.path.dirname(os.path.abspath(sys.argv[0]))
        MYBOOK = os.path.abspath(sys.argv[1])
        RDFD = exp_level_idx(MYBOOK)
        #exp_root_idx(MYBOOK, RDFD)
        rebuild_rdf(MYBOOK, RDFD)
        #chk_data_dir(MYBOOK)
        #exp_root_idx(MYBOOK, RDFD)















</t>
<t tx="zoomq.20140226204618.4758">import os
import sys
import pickle
import types
import time
import shutil
#import traceback
import xml.parsers.expat
#import xml.etree.cElementTree as etree

#from lxml import etree
#from xml.etree.cElementTree import ElementTree
#from rdflib.URIRef import URIRef
#from rdflib.Literal import Literal
#from rdflib.BNode import BNode
#from rdflib.Namespace import Namespace
#from rdflib.constants import TYPE, VALUE
# Import RDFLib's default TripleStore implementation
#from rdflib.TripleStore import TripleStore
#import surf


</t>
<t tx="zoomq.20140226204618.4759">class Borg():
    '''base http://blog.youxu.info/2010/04/29/borg
        - 单例式配置收集类
    '''
    __collective_mind = {}
    def __init__(self):
        self.__dict__ = self.__collective_mind

    &lt;&lt;configures&gt;&gt;

# init all cfg. var
CF = Borg()

</t>
<t tx="zoomq.20140226204618.4760">#path
RDF = "%s/scrapbook.rdf"

@others

IS_ROOT = 0
IS_SEQ = 0
IS_LI = 0
IS_DESC = 0

DICTRDF = {"ROOT":{}
    ,"SEQ":{}
    ,"DESC":{}
    }
CRTID = ""
'''
{"ROOT":{'id':'','li':[]}
,"SEQ":{'item...':[]
    ,,,}
,"DESC":{'item...':{'id':''
        ,'type':"" # folder||separator
        ,'icon':''
        ,'title':''
        ,'source':''
        ,'chars':''
        ,'comment':''
        }
    ,,,
    }
}
'''
</t>
<t tx="zoomq.20140226204618.4761">def run_time(func):
    '''from http://www.oschina.net/code/snippet_74928_3896
        - 简单的计时装饰器
    '''
    def cal_time(*args):
        '''完成目标函式的运行计时
        '''
        start = time.time()
        result = func(*args)
        passtime = time.time() - start
        print "\n\t%s() RUNed~ %.5f ms" % (func.__name__, passtime*1000)
        return result
    return cal_time

</t>
<t tx="zoomq.20140226204618.4762">def exp_level_idx(pathto):
    #print pathto, CF.RDF% pathto, os.path.basename(pathto)
    @others
    px = xml.parsers.expat.ParserCreate()
    px.StartElementHandler = start_element
    px.EndElementHandler = end_element
    px.Parse(open(CF.RDF % pathto).read(), 1)
    output = open('scraotools_%s.pkl' % os.path.basename(pathto) , 'wb')
    pickle.dump(CF.DICTRDF, output)
    #output.close
    return CF.DICTRDF

</t>
<t tx="zoomq.20140226204618.4763">def start_element(name, attrs):
    #print 'Start element:', name, attrs
    if "RDF:Seq" == name:
        CF.IS_SEQ = 1
        CF.IS_DESC = 0
        if "urn:scrapbook:root" == attrs['RDF:about']:
            #print 'ROOT element:', name, attrs
            CF.IS_ROOT = 1
            CF.DICTRDF['ROOT']['id'] = attrs['RDF:about'].split(":")[-1]
            CF.CRTID = attrs['RDF:about'].split(":")[-1]
            CF.DICTRDF['ROOT']['li'] = []
        else:
            CF.IS_ROOT = 0
            CF.CRTID = attrs['RDF:about'].split(":")[-1]
            CF.DICTRDF['SEQ'][CF.CRTID] = []
    else:
        CF.IS_SEQ = 0
        if "RDF:li" == name:
            CF.IS_DESC = 0
            CF.IS_LI = 1
            if CF.IS_ROOT:
                CF.DICTRDF['ROOT']['li'].append(attrs['RDF:resource'].split(":")[-1])
            else:
                CF.DICTRDF['SEQ'][CF.CRTID].append(attrs['RDF:resource'].split(":")[-1])
        elif "RDF:Description" == name:
            CF.IS_DESC = 1
            CF.IS_LI = 0
            CF.CRTID = attrs['RDF:about'].split(":")[-1]
            CF.DICTRDF['DESC'][CF.CRTID] = {
                'id':attrs['NS2:id']
                ,'type':attrs['NS2:type']
                ,'title':attrs['NS2:title']
                ,'source':attrs['NS2:source']
                ,'chars':attrs['NS2:chars']
                ,'icon':attrs['NS2:icon']
                ,'comment':attrs['NS2:comment']
                }





</t>
<t tx="zoomq.20140226204618.4764">def end_element(name):
    if "RDF:Seq" == name:
        if CF.IS_ROOT:
            CF.IS_ROOT = 0
        else:
            pass
</t>
<t tx="zoomq.20140226204618.4765">def chk_data_dir(abspath):
    sub_data = os.listdir("%s/data"% abspath)
    print len(sub_data)
    return sub_data
    </t>
<t tx="zoomq.20140226204618.4766">@run_time
def rebuild_rdf(expath, drdf):
    rdf = drdf   #pickle.load(open(pkl, 'r'))
    print rdf.keys()
    seq_lis = ""
    ROOT_KEYS = rdf['ROOT']['li']
    SEQ_KEYS = rdf['SEQ'].keys()
    DESC_KEYS = rdf['DESC'].keys()
    &lt;&lt;gen_root&gt;&gt;
    &lt;&lt;gen_seqs&gt;&gt;
    &lt;&lt;gen_desc&gt;&gt;
    re_rdf = CF.RDF_ROOT% locals()
    #print re_rdf
    open("scrapbook.rdf",'w').write(re_rdf.encode('utf-8'))
    #print 'item20091113232313' in rdf['SEQ'].keys()#['item20091113232313']
    #print rdf['SEQ']['item20070527155735']
    #print len(rdf['ROOT']['li'])
    
    


    
    </t>
<t tx="zoomq.20140226204618.4874">RDF_ROOT = '''&lt;?xml version="1.0"?&gt;
&lt;RDF:RDF xmlns:NS2="http://amb.vis.ne.jp/mozilla/scrapbook-rdf#"
         xmlns:NC="http://home.netscape.com/NC-rdf#"
         xmlns:RDF="http://www.w3.org/1999/02/22-rdf-syntax-ns#"&gt;
  %(rdf_items)s
&lt;/RDF:RDF&gt;
'''

RDF_SEQ_ROOT = '''&lt;RDF:Seq RDF:about="urn:scrapbook:root"&gt;
%(seq_lis)s  &lt;/RDF:Seq&gt;
'''
RDF_SEQ_UL = '''&lt;RDF:Seq RDF:about="urn:scrapbook:%(rdf_about)s"&gt;
%(seq_lis)s  &lt;/RDF:Seq&gt;
'''
RDF_SEQ_LI = '''    &lt;RDF:li RDF:resource="urn:scrapbook:%(seq_res)s"/&gt;
'''

RDF_DESC = '''&lt;RDF:Description RDF:about="urn:scrapbook:%(rdf_about)s"
                NS2:id="%(rdf_id)s"
                NS2:type="%(rdf_type)s"
                NS2:title="%(rdf_title)s"
                NS2:chars="%(rdf_chars)s"
                NS2:icon="%(rdf_icon)s"
                NS2:source="%(rdf_scource)s"
                NS2:comment="%(rdf_comment)s" /&gt;
'''



</t>
<t tx="zoomq.20140226204618.4875">for r in DESC_KEYS:    
    rdf_about = r
    rdf_id = rdf['DESC'][r]['id']
    rdf_type = rdf['DESC'][r]['type']
    rdf_title = rdf['DESC'][r]['title']
    rdf_chars = rdf['DESC'][r]['chars']
    rdf_icon = rdf['DESC'][r]['icon']
    rdf_scource = rdf['DESC'][r]['source']
    rdf_comment = rdf['DESC'][r]['comment']
    
    crt_dec = CF.RDF_DESC% locals()
    rdf_items += crt_dec


</t>
<t tx="zoomq.20140226204618.4876">#rdf['ROOT']['li']
for r in SEQ_KEYS:
    if r not in ROOT_KEYS:
        #in SEQ_KEYS
        rdf_about = r
        #print r
        &lt;&lt;gen_seq&gt;&gt;
        crt_seq = CF.RDF_SEQ_UL% locals()
        rdf_items += crt_seq
        #print rdf_items

    #return None



</t>
<t tx="zoomq.20140226204618.4877">seq_lis = ""
for sub_r in rdf['SEQ'][r]:
    seq_res = sub_r 
    seq_lis += CF.RDF_SEQ_LI% locals()
#print seq_lis

#return None</t>
<t tx="zoomq.20140226204618.4881">for r in ROOT_KEYS:
    #print r
    seq_res = r 
    seq_lis += CF.RDF_SEQ_LI% locals()

rdf_items = CF.RDF_SEQ_ROOT% locals()

for r in ROOT_KEYS:
    if r in SEQ_KEYS:
        rdf_about = r
        &lt;&lt;gen_seq&gt;&gt;
        crt_seq = CF.RDF_SEQ_UL% locals()
        rdf_items += crt_seq


</t>
<t tx="zoomq.20140226204618.4882">seq_lis = ""
for sub_r in rdf['SEQ'][r]:
    seq_res = sub_r 
    seq_lis += CF.RDF_SEQ_LI% locals()

</t>
<t tx="zoomq.20140708152848.3462">CF.IS_SEQ = 1
CF.IS_DESC = 0
if "urn:scrapbook:root" == attrs['RDF:about']:
    #print 'ROOT element:', name, attrs
    CF.IS_ROOT = 1
    CF.DICTRDF['ROOT']['id'] = attrs['RDF:about'].split(":")[-1]
    CF.CRTID = attrs['RDF:about'].split(":")[-1]
    CF.DICTRDF['ROOT']['li'] = []
else:
    CF.IS_ROOT = 0
    CF.CRTID = attrs['RDF:about'].split(":")[-1]
    CF.DICTRDF['SEQ'][CF.CRTID] = []
</t>
<t tx="zoomq.20140708152848.3463">CF.IS_DESC = 0
CF.IS_LI = 1
if CF.IS_ROOT:
    CF.DICTRDF['ROOT']['li'].append(attrs['RDF:resource'].split(":")[-1])
else:
    CF.DICTRDF['SEQ'][CF.CRTID].append(attrs['RDF:resource'].split(":")[-1])
</t>
<t tx="zoomq.20140708152848.3464">CF.IS_DESC = 1
CF.IS_LI = 0
CF.CRTID = attrs['RDF:about'].split(":")[-1]
CF.DICTRDF['DESC'][CF.CRTID] = {
    'id':attrs['NS2:id']
    ,'type':attrs['NS2:type']
    ,'title':attrs['NS2:title']#.encode('utf8')
    ,'source':attrs['NS2:source']
    ,'chars':attrs['NS2:chars']
    ,'icon':attrs['NS2:icon']
    ,'comment':attrs['NS2:comment']
    }

</t>
<t tx="zoomq.20140708152848.3466"># 解决写文件 'ascii' codec can't encode characters 问题
# base http://blog.csdn.net/zuyi532/article/details/8851316
reload(sys)  
sys.setdefaultencoding('utf8')   
# 全局变量
exp_items = []  # 实际输出节点对象
loop_safe = 5   # 递归安全深度
exp_txt = []    # 输出文本桟

@run_time
def exp_rdf_tree(expath, drdf):
    '''怀疑有很多根本没有出现在树中的结点!
    '''
    rdf = drdf
    #print rdf['DESC']['item20100817230519']
    deepl = 0
    for r in rdf['ROOT']['li']:
        exp_items.append(r)
        crt_deep, crt_tree = _exp_txt_tree(exp_txt, deepl, r, drdf)
    casename = os.path.basename(expath)
    print "\t tree_nodes: ",len(exp_txt)
    open(CF.TREE % casename, 'w').write("\n".join(exp_txt))
    print "\t exp_items: ", len(exp_items)
    print "\t dirs: ", len(exp_items) - len(exp_txt)
    
    print "\t DESC : %s"% len(rdf['DESC'].keys())
    #_diff_show_tree(expath, exp_items, drdf)

&lt;&lt;_diff_show_tree&gt;&gt;
&lt;&lt;_exp_txt_tree&gt;&gt;


</t>
<t tx="zoomq.20140708152848.3467">if 2 != len(sys.argv):
    print """ %s 检查 ScrapBook 仓库目录
usage::
$ python /path/2/chkscrap.py /path/2/MyScrapBook/
        |                       +- ScrapBook 收藏入口目录
        +- 指出脚本自身
    """ % VERSION
else:
    TPATH = os.path.dirname(os.path.abspath(sys.argv[0]))
    MYBOOK = os.path.abspath(sys.argv[1])
    REPO_NAME = os.path.basename(MYBOOK)
    #print REPO_NAME
    #XRDF = exp_level_idx(MYBOOK)
    XRDF = _load_pkl(REPO_NAME)
    rm_chaos_search(REPO_NAME, XRDF)
    #re_xmltodict_rdf(REPO_NAME, XRDF)
    #mv_chaos_data(REPO_NAME, XRDF)
    #   chk_data_ids(MYBOOK, XRDF)
    #   exp_root_idx(MYBOOK, XRDF)
    #   chk_data_dir(MYBOOK)
    #exp_rdf_tree(MYBOOK, XRDF)

</t>
<t tx="zoomq.20140708152848.3468">@click.group()
@click.version_option()
def cli():
    """检查 ScrapBook 仓库目录
    """
    print('V 14.7.8.20')

</t>
<t tx="zoomq.20140708152848.3469">@cli.group()
def ship():
    """Manages ships."""


@ship.command('new')
@click.argument('name')
def ship_new(name):
    """Creates a new ship."""
    click.echo('Created ship %s' % name)


@ship.command('move')
@click.argument('ship')
@click.argument('x', type=float)
@click.argument('y', type=float)
@click.option('--speed', metavar='KN', default=10,
              help='Speed in knots.')
def ship_move(ship, x, y, speed):
    """Moves SHIP to the new location X,Y."""
    click.echo('Moving ship %s to %s,%s with speed %s' % (ship, x, y, speed))


@ship.command('shoot')
@click.argument('ship')
@click.argument('x', type=float)
@click.argument('y', type=float)
def ship_shoot(ship, x, y):
    """Makes SHIP fire to X,Y."""
    click.echo('Ship %s fires to %s,%s' % (ship, x, y))


@cli.group('mine')
def mine():
    """Manages mines."""


@mine.command('set')
@click.argument('x', type=float)
@click.argument('y', type=float)
@click.option('ty', '--moored', flag_value='moored',
              default=True,
              help='Moored (anchored) mine. Default.')
@click.option('ty', '--drifting', flag_value='drifting',
              help='Drifting mine.')
def mine_set(x, y, ty):
    """Sets a mine at a specific coordinate."""
    click.echo('Set %s mine at %s,%s' % (ty, x, y))


@mine.command('remove')
@click.argument('x', type=float)
@click.argument('y', type=float)
def mine_remove(x, y):
    """Removes a mine at a specific coordinate."""
    click.echo('Removed mine at %s,%s' % (x, y))

</t>
<t tx="zoomq.20140708152848.3470">@run_time
def _load_pkl(REPO_NAME):
    print CF.PKL % REPO_NAME
    XRDF = pickle.load(open(CF.PKL % REPO_NAME, 'r'))
    print XRDF.keys()
    print "RDF:ROOT\t", len(XRDF['root']['RDF:li'])
    #print RDFD['root']
    print "RDF:Seq\t\t\t", len(XRDF['k2seq'].keys())
    print "RDF:Description\t\t", len(XRDF['k2desc'].keys())
    print "NC:BookmarkSeparator\t", len(XRDF['k2nc'])
    
    return XRDF


    </t>
<t tx="zoomq.20140708152848.3471">def _exp_txt_tree(exp_txt, deepl, node, drdf):
    if deepl &gt; loop_safe:
        return None
    rdf = drdf
    r = node
    pre = ".." * deepl
    if r in rdf['DESC'].keys():
        exp_items.append(r)
        dir_type = rdf['DESC'][r]['type']
        #print "%s%s %s %s"% (pre, r, dir_type, rdf['DESC'][r]['title'])
        exp_txt.append("%s%s %s %s"% (pre, r, dir_type, rdf['DESC'][r]['title']))
    # 可能重ID ?
    if r in rdf['SEQ'].keys():
        #print rdf['SEQ'][r]
        exp_items.append(r)
        for l in rdf['SEQ'][r]:
            _exp_txt_tree(exp_txt, deepl+1, l, drdf)
    else:
        if r in rdf['DESC'].keys():
            print rdf['DESC'][r]['type']
        else:
            print r
            return None
            #print "\t NC:BookmarkSeparator",r
            #exp_items.append(r)
        #print "\t one line---"
    return deepl+1, exp_txt



</t>
<t tx="zoomq.20140708152848.3472">
def _diff_show_tree(expath, show_items, drdf):
    rdf = drdf
    showed = list(set(show_items))
    chaos = []
    for node in rdf['DESC'].keys():
        if node not in showed:
            chaos.append(rdf['DESC'][node])
    print "\t chaos:", len(chaos)
    print "\t 有效:", len(rdf['DESC'].keys())-len(chaos)
    for c in chaos:
        del_dir = "%s/data/%s"% (expath, c['id'])
        print(rm("-Rfv", del_dir))
        #os.removedirs(del_dir)
        #break</t>
<t tx="zoomq.20140708152848.3473">@path _chaos
</t>
<t tx="zoomq.20140708152848.3475">&lt;&lt;TPL_BODY&gt;&gt;

&lt;&lt;TPL_ROOT&gt;&gt;
&lt;&lt;TPL_SEQ&gt;&gt;
&lt;&lt;TPL_LI&gt;&gt;

&lt;&lt;TPL_FOLDER&gt;&gt;
&lt;&lt;TPL_NOTE&gt;&gt;
&lt;&lt;TPL_URI&gt;&gt;

&lt;&lt;TPL_NC&gt;&gt;








</t>
<t tx="zoomq.20140708152848.3476">TPL_BODY = '''&lt;?xml version="1.0"?&gt;
&lt;RDF:RDF xmlns:NS2="http://amb.vis.ne.jp/mozilla/scrapbook-rdf#"
         xmlns:NC="http://home.netscape.com/NC-rdf#"
         xmlns:RDF="http://www.w3.org/1999/02/22-rdf-syntax-ns#"&gt;
%(rdf_body)s
&lt;/RDF:RDF&gt;
'''
</t>
<t tx="zoomq.20140708152848.3477">TPL_ROOT = '''&lt;RDF:Seq RDF:about="urn:scrapbook:root"&gt;
    %(rdf_li)s
  &lt;/RDF:Seq&gt;
'''
</t>
<t tx="zoomq.20140708152848.3478">TPL_SEQ = '''&lt;RDF:Seq RDF:about="urn:scrapbook:%(rdf_item)s"&gt;
    %(rdf_li)s
  &lt;/RDF:Seq&gt;
'''
</t>
<t tx="zoomq.20140708152848.3479">TPL_LI = '''
&lt;RDF:li RDF:resource="urn:scrapbook:%(rdf_item)s"/&gt;
'''
</t>
<t tx="zoomq.20140708152848.3480">TPL_FOLDER = '''
&lt;RDF:Description RDF:about="urn:scrapbook:%(rdf_item)s"
        NS2:type="folder"
        NS2:id="%(rdf_id)s"
        NS2:title="%(rdf_title)s"
        NS2:chars=""
        NS2:icon=""
        NS2:source=""
        NS2:comment="" /&gt;
'''
</t>
<t tx="zoomq.20140708152848.3481"># type 为空或是"marked"
TPL_URI = '''
&lt;RDF:Description RDF:about="urn:scrapbook:%(rdf_item)s"
        NS2:type="%(rdf_type)s"
        NS2:id="%(rdf_id)s"
        NS2:title="%(rdf_title)s"
        NS2:comment="%(rdf_comment)s"
        NS2:icon="%(rdf_icon)s"
        NS2:source="%(rdf_source)s" 
        NS2:chars="UTF-8" /&gt;
'''
</t>
<t tx="zoomq.20140708152848.3482">TPL_NC = '''
&lt;NC:BookmarkSeparator RDF:about="urn:scrapbook:%(rdf_item)s"
        NS2:type="separator"
        NS2:id="%(rdf_id)s"
        NS2:title=""
        NS2:chars=""
        NS2:comment=""
        NS2:icon=""
        NS2:source="" /&gt;
'''
</t>
<t tx="zoomq.20140708152848.3483">TPL_NOTE = '''
&lt;RDF:Description RDF:about="urn:scrapbook:%(rdf_item)s"
        NS2:type="note"
        NS2:id="%(rdf_id)s"
        NS2:title="%(rdf_title)s"
        NS2:chars="UTF-8"
        NS2:comment=""
        NS2:icon=""
        NS2:source=""/&gt;
'''
</t>
<t tx="zoomq.20140708152848.3485">@others
px = xml.parsers.expat.ParserCreate()
px.StartElementHandler = start_element
px.EndElementHandler = end_element
px.Parse(open(CF.RDF % pathto).read(), 1)
output = open(CF.PKL % os.path.basename(pathto) , 'wb')
pickle.dump(CF.DICTRDF, output)
#output.close
return CF.DICTRDF

</t>
<t tx="zoomq.20140708152848.3486">obj = untangle.parse("%s/scrapbook.rdf"% pathto)
print dir(obj.RDF_RDF.RDF_Description)
print "RDF:Seq\t\t\t", len(obj.RDF_RDF.RDF_Seq)
print "RDF_Description\t\t", len(obj.RDF_RDF.RDF_Description)
print "NC:BookmarkSeparator\t", len(obj.RDF_RDF.NC_BookmarkSeparator)

output = open(CF.PKL % os.path.basename(pathto) , 'wb')
print output
#print type(obj.RDF_RDF)
#pickle.dump(obj.RDF_RDF, output)
return obj.RDF_RDF
</t>
<t tx="zoomq.20140708152848.3487">doc = xmltodict.parse(open("%s/scrapbook.rdf"% pathto, 'r').read())
#print dir(doc)
'''
&lt;&lt;rm_chaos_search&gt;&gt;
'''
print doc.keys()
print "RDF:Seq\t\t\t", len(doc['RDF:RDF']['RDF:Seq'])
print "RDF:Description\t\t", len(doc['RDF:RDF']['RDF:Description'])
print "NC:BookmarkSeparator\t", len(doc['RDF:RDF']['NC:BookmarkSeparator'])
XRDF = {'doc':doc
    , 'k2seq':{}
    , 'k2desc':{}
    , 'k2nc':{}
    , 'root':[] #seq['RDF:li']
    }
# re-index for KV points
print "keys doc['RDF:RDF']\n\t", doc['RDF:RDF'].keys()
for seq in doc['RDF:RDF']['RDF:Seq']:
    if "urn:scrapbook:root" == seq['@RDF:about']:
        XRDF['root'] = seq
    else:
        XRDF['k2seq'][seq['@RDF:about']] = seq
for desc in doc['RDF:RDF']['RDF:Description']:
    XRDF['k2desc'][desc['@RDF:about']] = desc 
for nc in doc['RDF:RDF']['NC:BookmarkSeparator']:
    XRDF['k2nc'][nc['@RDF:about']] = nc 

output = open(CF.PKL % os.path.basename(pathto) , 'wb')
print output
#print type(obj.RDF_RDF)
pickle.dump(XRDF, output)
return XRDF



</t>
<t tx="zoomq.20140708152848.3488">_RIGHT_NODES = [] # collect all showing nodes: dir/note/line/page
@run_time
def re_xmltodict_rdf(REPO_NAME, XRDF):
    """usage xmltodict check hided chaos nodes
        and re-build tiny rdf
        for ScrapBook reload
    """
    print XRDF.keys()
    RDFD = XRDF['doc']['RDF:RDF']
    K2SEQ = XRDF['k2seq']
    K2DESC = XRDF['k2desc']
    K2NC = XRDF['k2nc']
    print "RDF:Seq\t\t\t", len(RDFD['RDF:Seq'])
    print "RDF:Description\t\t", len(RDFD['RDF:Description'])
    print "NC:BookmarkSeparator\t", len(RDFD['NC:BookmarkSeparator'])
    print "\tK2DESC\t", len(K2DESC)
    ROOT = XRDF['root']
    #print ROOT['RDF:li']
    #print "\t K2NC:", K2NC['urn:scrapbook:item20091118105509']
    for li in ROOT['RDF:li']:
        #print "\t ROOT here walk out all rights nodes!"
        _walk_rdf_tree(exp_txt, 1, li, XRDF)

    &lt;&lt;_clean_rdf&gt;&gt;

    return None

&lt;&lt;_walk_rdf_tree&gt;&gt;
&lt;&lt;_print_tree_node&gt;&gt;



</t>
<t tx="zoomq.20140708152848.3489">def _walk_rdf_tree(exp_txt, deepl, crt_node, XRDF):
    """base pointed node, try dig all of son nodes
    - all start node must be RDF:Seq
    - if not , means end dig do others matter
    """
    if deepl &gt; loop_safe:
        return None
    RDFD = XRDF['doc']['RDF:RDF']
    K2SEQ = XRDF['k2seq']
    K2DESC = XRDF['k2desc']
    K2NC = XRDF['k2nc']
    if '@RDF:resource' in crt_node.keys():
        # Seq|Li
        crt_id = crt_node['@RDF:resource']
    else:   
        # DESC|NC
        crt_id = crt_node['@RDF:about']
    # 记录了包含目录以及其它所有有效的节点
    _RIGHT_NODES.append(crt_id) 
    # for recursion must test all cases
    
    @others
            
    return deepl+1, exp_txt


</t>
<t tx="zoomq.20140708152848.3490">if crt_id in K2SEQ.keys():
    # means contents: note/line/page
    &lt;&lt;in SEQ&gt;&gt;
else:
    # crt_id in K2DESC.keys():
    # means DESC
    #_print_tree_node(deepl, crt_id, K2DESC)
    pass
</t>
<t tx="zoomq.20140708152848.3491">#_print_tree_node(deepl, crt_id, K2DESC)
if 'RDF:li' not in K2SEQ[crt_id].keys():
    """&lt;RDF:Seq RDF:about="urn:scrapbook:item20120321212141"&gt;
    &lt;/RDF:Seq&gt;
    类似的空目录情况....
    直接输出目录名就好
    """
    #_print_tree_node(deepl, crt_id, K2DESC)
    pass
else:
    if 1 == len(K2SEQ[crt_id]['RDF:li']):
        _walk_rdf_tree(exp_txt
            , deepl+1
            , K2SEQ[crt_id]['RDF:li']
            , XRDF)
        _RIGHT_NODES.append(K2SEQ[crt_id]['RDF:li']['@RDF:resource'])
        
    else:
        #print type(K2SEQ[crt_id]['RDF:li'])
        #print K2SEQ[crt_id]['RDF:li']
        for li in K2SEQ[crt_id]['RDF:li']:
            #print "K2SEQ[crt_id]&gt;RDF:Li", li
            _walk_rdf_tree(exp_txt
                , deepl+1
                , li
                , XRDF)
            _RIGHT_NODES.append(li['@RDF:resource'])
        </t>
<t tx="zoomq.20140708152848.3492">def _print_tree_node(deepl, crt_id, K2DESC):
    if crt_id in K2DESC:
        n_type = K2DESC[crt_id]['@NS2:type']
        show_type = "c"
        if "folder" == n_type:
            show_type = "D"
        elif "note" == n_type:
            show_type = "N"
        else:
            pass
        print "%s %s %s %s"% (".."*deepl
            , show_type
            , crt_id.split(':')[-1]
            , K2DESC[crt_id]['@NS2:title']
            )
    else:
        print "~"*42

</t>
<t tx="zoomq.20140708152848.3493">print "\t _RIGHT_NODES:", len(_RIGHT_NODES)
RIGHT_NODES = list(set(_RIGHT_NODES))
print "\t RIGHT_NODES:", len(RIGHT_NODES)
RDF_DESC = XRDF['doc']['RDF:RDF']['RDF:Description']
K2DESC = XRDF['k2desc']
#print "id-&gt;RDF_DEC", id(RDF_DESC)
#print "id-&gt;XRDF['doc']...", id(XRDF['doc']['RDF:RDF']['RDF:Description'])
&lt;&lt;progressbar&gt;&gt;
ccount = 0
&lt;&lt;cleanning&gt;&gt;
&lt;&lt;CTIME&gt;&gt;
#return None
if 0 == ccount:
    # finshed cleanning
    open(CF.RERDF % REPO_NAME, "w").write(
        xmltodict.unparse(XRDF['doc'], pretty=True))
    print CF.RERDF % REPO_NAME
else:
    # try more time
    #XRDF = _load_pkl(REPO_NAME)
    print "&gt;"*13, "reTRY cleanning", XRDF['CTIME']
    # call self try again
    re_xmltodict_rdf(REPO_NAME, XRDF)















</t>
<t tx="zoomq.20140708152848.3497">for i in RDF_DESC:
    crt_ID = i['@RDF:about']
    if crt_ID not in RIGHT_NODES:
        ccount += 1
        #print RDF_DESC.index(i)
        K2DESC.pop(crt_ID)
        RDF_DESC.pop(RDF_DESC.index(i))

        pbar+1
        pbar.show_progress()

print "\nchaos notes:\t", ccount
print "clean DESC:\t", len(RDF_DESC)
</t>
<t tx="zoomq.20140708152848.7641">max_action = len(RDF_DESC)# - len(RIGHT_NODES)
#(end=max_action, width=79)
opt_pbar = {'end':max_action, 'width':64
    , 'fill': '&gt;'
    }
pbar = progressbar.AnimatedProgressBar(**opt_pbar)
</t>
<t tx="zoomq.20140708152848.7642">if "CTIME" not in XRDF.keys():
    XRDF['CTIME'] = 2
else:
    XRDF['CTIME'] = XRDF['CTIME'] + 1
# re-writed as .pkl
_PKL = CF.PKL % REPO_NAME
print(rm("-fv", _PKL))

output = open(_PKL , 'wb')
print output
pickle.dump(XRDF, output)

</t>
<t tx="zoomq.20140708152848.7643">@run_time
def mv_chaos_data(REPO_NAME, XRDF):
    """对比 data/ 目录和有效节点 ID
    - mv 文章目录到指定备案目录 CF.STUFF
    """
    K2DESC = XRDF['k2desc']
    RDF_DESC = XRDF['doc']['RDF:RDF']['RDF:Description']
    _AIM_DRI = "%s/data"% REPO_NAME
    #print _AIM_DRI
    #data_ls = ls("-1", _AIM_DRI)
    #data_li = data_ls.stdout.split()
    data_li = os.listdir(_AIM_DRI)
    print len(data_li), "\t&lt;-- %s sub dirs"% _AIM_DRI
    #print len(RDF_DESC), "\t&lt;-- doc['RDF:RDF']['RDF:Description']"
    #print len(K2DESC.keys()), "\t&lt;-- K2DESC.keys()"
    _K4DESC = []
    for i in K2DESC.keys():
        _K4DESC.append(K2DESC[i]['@RDF:about'][-14:])
    #print len(_K4DESC), "\t&lt;-- _K4DESC"
    #return None
    &lt;&lt;progressbar&gt;&gt;
    count = 0
    for li in data_li:
        #_id = CF.IDPRE % li
        #return None
        pbar+1
        pbar.show_progress()
        if li not in _K4DESC:   #K2DESC.keys():
            count += 1
            _SRC = "%s/%s"% (_AIM_DRI, li)
            #mv(_SRC, CF.STUFF)
            cp("-rf", _SRC, CF.STUFF)
            rm("-rf", _SRC)
            #print "mv -v %s %s"% (_SRC, CF.STUFF)
            #break
    print "\n\tmv %s dir into %s"% (count, CF.STUFF)
    print "means keep %s dir"% (len(data_li) - count)
    print "&gt;&gt;&gt; ls -1 %s|wc -l"% _AIM_DRI
    print(wc(ls("-1", _AIM_DRI), "-l"))
    return None


</t>
<t tx="zoomq.20140708152848.7645">max_action = len(data_li)
#import progressbar
#(end=max_action, width=79)
opt_pbar = {'end':max_action, 'width':64
    , 'fill': '&gt;'
    }
pbar = progressbar.AnimatedProgressBar(**opt_pbar)
</t>
<t tx="zoomq.20140710225253.4568">@run_time
def rm_chaos_search(REPO_NAME, XRDF):
    """Must empty as:
    &lt;RDF:Seq RDF:about="urn:scrapbook:search"&gt;
    &lt;/RDF:Seq&gt;
    """
    RDFD = XRDF['doc']['RDF:RDF']
    for seq in RDFD['RDF:Seq']:
        if 'urn:scrapbook:search' == seq['@RDF:about']:
            print "son of urn:scrapbook:search:", len(seq['RDF:li'])
            seq.pop('RDF:li')
            break
    open(CF.RERDF % REPO_NAME, "w").write(
        xmltodict.unparse(XRDF['doc'], pretty=True))
    return None
    </t>
<t tx="zoomq.20140710225253.4569">for seq in doc['RDF:RDF']['RDF:Seq']:
    if 'urn:scrapbook:search' == seq['@RDF:about']:
        print dir(seq)
        print seq.keys()
        print "son of urn:scrapbook:search:", len(seq['RDF:li'])
        seq.pop('RDF:li')
        break



</t>
<t tx="zoomq.20140710225253.4580">@run_time
def exp_level_idx(pathto):
    '''解析现有 rdf 为 py 数据对象来快速理解/清查
    '''
    #print pathto, CF.RDF% pathto, os.path.basename(pathto)
    print "%s/scrapbook.rdf"% pathto 
    &lt;&lt;xml.parsers.expat&gt;&gt;
    return None   
    
    &lt;&lt;xmltodict.parse&gt;&gt;
    return None   
    
    &lt;&lt;untangle.parse&gt;&gt;
    return None    
    
    
'''
#   140711 Alert!
&lt;RDF:Seq RDF:about="urn:scrapbook:search"&gt;
&lt;/RDF:Seq&gt;


{'ROOT':[item,,,]
        , 'SEQ':{'itemID':[item,,,],,,}
        , 'DESC':['itemID':{'属性':'属性值',,},,,]
    }
    ROOT 结点 -&gt; [SEQ|DESC]
        SEQ 都是目录;
        DESC 都是最终叶子;
    
'''</t>
<t tx="zoomq.20140710225253.4581">doc = xmltodict.parse(open("%s/scrapbook.rdf"% pathto, 'r').read())
#print dir(doc)
'''
&lt;&lt;rm_chaos_search&gt;&gt;
'''
print doc.keys()
print "RDF:Seq\t\t\t", len(doc['RDF:RDF']['RDF:Seq'])
print "RDF:Description\t\t", len(doc['RDF:RDF']['RDF:Description'])
print "NC:BookmarkSeparator\t", len(doc['RDF:RDF']['NC:BookmarkSeparator'])
XRDF = {'doc':doc
    , 'k2seq':{}
    , 'k2desc':{}
    , 'k2nc':{}
    , 'root':[] #seq['RDF:li']
    }
# re-index for KV points
print "keys doc['RDF:RDF']\n\t", doc['RDF:RDF'].keys()
for seq in doc['RDF:RDF']['RDF:Seq']:
    if "urn:scrapbook:root" == seq['@RDF:about']:
        XRDF['root'] = seq
    else:
        XRDF['k2seq'][seq['@RDF:about']] = seq
for desc in doc['RDF:RDF']['RDF:Description']:
    XRDF['k2desc'][desc['@RDF:about']] = desc 
for nc in doc['RDF:RDF']['NC:BookmarkSeparator']:
    XRDF['k2nc'][nc['@RDF:about']] = nc 

output = open(CF.PKL % os.path.basename(pathto) , 'wb')
print output
#print type(obj.RDF_RDF)
pickle.dump(XRDF, output)
return XRDF



</t>
<t tx="zoomq.20140710225253.4582">for seq in doc['RDF:RDF']['RDF:Seq']:
    if 'urn:scrapbook:search' == seq['@RDF:about']:
        print dir(seq)
        print seq.keys()
        print "son of urn:scrapbook:search:", len(seq['RDF:li'])
        seq.pop('RDF:li')
        break



</t>
<t tx="zoomq.20140710225253.4583">obj = untangle.parse("%s/scrapbook.rdf"% pathto)
print dir(obj.RDF_RDF.RDF_Description)
print "RDF:Seq\t\t\t", len(obj.RDF_RDF.RDF_Seq)
print "RDF_Description\t\t", len(obj.RDF_RDF.RDF_Description)
print "NC:BookmarkSeparator\t", len(obj.RDF_RDF.NC_BookmarkSeparator)

output = open(CF.PKL % os.path.basename(pathto) , 'wb')
print output
#print type(obj.RDF_RDF)
#pickle.dump(obj.RDF_RDF, output)
return obj.RDF_RDF
</t>
<t tx="zoomq.20140710225253.4584">@others
px = xml.parsers.expat.ParserCreate()
px.StartElementHandler = start_element
px.EndElementHandler = end_element
px.Parse(open(CF.RDF % pathto).read(), 1)
output = open(CF.PKL % os.path.basename(pathto) , 'wb')
pickle.dump(CF.DICTRDF, output)
#output.close
return CF.DICTRDF

</t>
<t tx="zoomq.20140710225253.4585">def start_element(name, attrs):
    #print 'Start element:', name, attrs
    if "RDF:Seq" == name:
        &lt;&lt;RDF:Seq&gt;&gt;
    else:
        CF.IS_SEQ = 0
        if "RDF:li" == name:
            &lt;&lt;RDF:li&gt;&gt;
        elif "RDF:Description" == name:
            &lt;&lt;RDF:Description&gt;&gt;






</t>
<t tx="zoomq.20140710225253.4586">CF.IS_DESC = 1
CF.IS_LI = 0
CF.CRTID = attrs['RDF:about'].split(":")[-1]
CF.DICTRDF['DESC'][CF.CRTID] = {
    'id':attrs['NS2:id']
    ,'type':attrs['NS2:type']
    ,'title':attrs['NS2:title']#.encode('utf8')
    ,'source':attrs['NS2:source']
    ,'chars':attrs['NS2:chars']
    ,'icon':attrs['NS2:icon']
    ,'comment':attrs['NS2:comment']
    }

</t>
<t tx="zoomq.20140710225253.4587">CF.IS_DESC = 0
CF.IS_LI = 1
if CF.IS_ROOT:
    CF.DICTRDF['ROOT']['li'].append(attrs['RDF:resource'].split(":")[-1])
else:
    CF.DICTRDF['SEQ'][CF.CRTID].append(attrs['RDF:resource'].split(":")[-1])
</t>
<t tx="zoomq.20140710225253.4588">CF.IS_SEQ = 1
CF.IS_DESC = 0
if "urn:scrapbook:root" == attrs['RDF:about']:
    #print 'ROOT element:', name, attrs
    CF.IS_ROOT = 1
    CF.DICTRDF['ROOT']['id'] = attrs['RDF:about'].split(":")[-1]
    CF.CRTID = attrs['RDF:about'].split(":")[-1]
    CF.DICTRDF['ROOT']['li'] = []
else:
    CF.IS_ROOT = 0
    CF.CRTID = attrs['RDF:about'].split(":")[-1]
    CF.DICTRDF['SEQ'][CF.CRTID] = []
</t>
<t tx="zoomq.20140710225253.4589">def end_element(name):
    if "RDF:Seq" == name:
        if CF.IS_ROOT:
            CF.IS_ROOT = 0
        else:
            pass
</t>
<t tx="zoomq.20200704152010.1">## 200704 
~/mnt/KuaiPan/zScrapBook༽
༄  du -hs *
...
1.6G	ZqDevRel
2.9G	ZqFLOSS
1003M	ZqKss
8.1G	ZqSKM

874M	ZqWks
470M	ZqXes
51M	_chaos
2.5G	backup
23M	ls1R.log
11M	ls1R_egrep_img.log
584K	scrapbooktools
4.0K	scraptools

1.3G	zqCoder
4.8G	zqDevRes
4.7G	zqPythonic
4.0G	zqSCM
3.4G	zqSMM
</t>
<t tx="zoomq.20200704152503.1">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
&lt;&lt;notes&gt;&gt;

&lt;&lt;imports&gt;&gt;
VERSION = "append_ann.py v200704.1542"
&lt;&lt;define&gt;&gt;

@others

if __name__ == "__main__":
    #cli(obj={})

    &lt;&lt;__main__&gt;&gt;
    
    














</t>
<t tx="zoomq.20200704152503.2">if 2 != len(sys.argv):
    print("""替换所有 ScrapBook 页面缀文
usage::
$ python /path/2/append_ann.py /path/2/MyScrapBook/
        |                       +- ScrapBook 收藏入口目录
        +- 指出脚本自身
by  %s 
    """ % VERSION)
else:
    TPATH = os.path.dirname(os.path.abspath(sys.argv[0]))
    MYBOOK = os.path.abspath(sys.argv[1])
    REPO_NAME = os.path.basename(MYBOOK)
    #print(TPATH,MYBOOK,REPO_NAME)
    append(TPATH,MYBOOK,REPO_NAME)
    #print REPO_NAME
    #XRDF = exp_level_idx(MYBOOK)
    #re_xmltodict_rdf(REPO_NAME, XRDF)
    #mv_chaos_data(REPO_NAME, XRDF)
    #   chk_data_ids(MYBOOK, XRDF)
    #   exp_root_idx(MYBOOK, XRDF)
    #   chk_data_dir(MYBOOK)
    #exp_rdf_tree(MYBOOK, XRDF)

</t>
<t tx="zoomq.20200704152503.5">import os
import sys
import time
import shutil

</t>
<t tx="zoomq.20200704152503.6">class Borg():
    '''base http://blog.youxu.info/2010/04/29/borg
        - 单例式配置收集类
    '''
    __collective_mind = {}
    def __init__(self):
        self.__dict__ = self.__collective_mind

    &lt;&lt;configures&gt;&gt;

# init all cfg. var
CF = Borg()

</t>
<t tx="zoomq.20200704152503.7">PAGE = 'data'
AIM = 'index.html'
INC = 'append.html'


@others
</t>
<t tx="zoomq.20200704152934.1">'''主要行为:
    检验已经追加 _ann
    如果没有 就追加
    已经有, 就替换


::...
替换区
...::
&lt;/body&gt;

'''
</t>
<t tx="zoomq.20200704154007.1">def append(troot,sroot,bname):
    #print(troot,sroot,bname)
    print(CF.AIM)
    _inc = '%s/%s'%(troot, CF.INC)
    _pages = '%s/%s'%(sroot, CF.PAGE)
    #print(_inc, _pages)
    
    _inc_htm = open(_inc,'r').read()
    #print(_inc_htm)
    _aim_pages = _page_walker(sroot)
    _replace_inc(_aim_pages)
    return None</t>
<t tx="zoomq.20200704154707.1">def _page_walker(sroot):
    _pages = '%s/%s'%(sroot, CF.PAGE)
    print(_pages)
    _subs = os.listdir(_pages)
    print(len(_subs),_subs[0])
    
    return _subs</t>
<t tx="zoomq.20200704155016.1">def _replace_inc(subs):
    print(len(subs),subs[0])
    return None</t>
</tnodes>
</leo_file>
